@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@using AzureNamingTool.Services
@using Microsoft.AspNetCore.Html
@inject IToastService toastService
@inject StateContainer state
@inject ProtectedSessionStorage session
@inject GeneralHelper GeneralHelper
@inject ResourceComponentService ResourceComponentService
@inject ResourceEnvironmentService ResourceEnvironmentService
@inject AdminUserService AdminUserService
@inject ResourceLocationService ResourceLocationService 
@inject ResourceProjAppSvcService ResourceProjAppSvcService 
@inject ResourceFunctionService ResourceFunctionService 
@inject ValidationHelper ValidationHelper 
@inject ResourceOrgService ResourceOrgService
@inject ResourceUnitDeptService ResourceUnitDeptService 
@inject CustomComponentService CustomComponentService
@inject AdminLogService AdminLogService

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="Cancel"></div>
    <div class="modal-dialog" style="z-index: 1050">
        <!-- Pop it above the backdrop -->
        <div class="modal-content @theme.ThemeStyle">
            <div class="modal-header @headerstyle text-white">
                <h3 class="modal-title">@title</h3>
            </div>
            <div class="modal-body">
                @((MarkupString)message)
                <div class="form-group mb-3">
                    <label for="name" style="font-weight:bold;">Name</label>
                    <input title="Name" value="@itemName" type="text" class="form-control @theme.ThemeStyle" id="name" @onchange="@((ui) => { itemName = (string)ui.Value!;})" />
                </div>
                @switch (type)
                {
                    case "ResourceComponent":
                        <div class="form-group mb-3">
                            <div class="mb-3">
                                <div class="fw-bold">
                                    Field Type
                                </div>
                                <select @bind="componenttype" class="form-control @theme.ThemeStyle">
                                    <option value="standard">Standard - User selects an option from a pre-defined list</option>
                                    <option value="freetext">Free Form Text - User inputs custom value</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <div class="fw-bold">
                                    Minimum Length
                                </div>
                                <div>
                                    <input title="Minimum Length" value="@itemMinLength" type="text" class="form-control @theme.ThemeStyle" id="minlength" @onchange="@((ui) => { itemMinLength = (string)ui.Value!;})" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" />
                                </div>
                            </div>
                            <div class="mb-3">
                                <div class="fw-bold">
                                    Maximum Length
                                </div>
                                <div>
                                    <input title="Maximum Length" value="@itemMaxLength" type="text" class="form-control @theme.ThemeStyle" id="maxlength" @onchange="@((ui) => { itemMaxLength = (string)ui.Value!;})" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" />
                                </div>
                            </div>
                        </div>
                        break;
                    case "AdminUser":
                        break;
                    default:
                        <div class="form-group mb-3">
                            <label for="shortName" style="font-weight:bold;">Short Name</label>
                            <input title="Short Name" value="@itemShortName" type="text" class="form-control @theme.ThemeStyle" id="shortname" @onchange="@((ui) => { itemShortName = (string)ui.Value!;})" />
                        </div>
                        break;
                }
            </div>
            <div class="modal-footer">
                <button title="Add" @onclick="Save" class="btn btn-success">Add</button>
                <button title="Cancel" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </div>
</div>



@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = new();
    [Parameter] public ThemeInfo theme { get; set; } = new();

    [Parameter] public int id { get; set; } = 0;
    [Parameter] public string title { get; set; } = String.Empty;
    [Parameter] public string message { get; set; } = String.Empty;
    [Parameter] public string type { get; set; } = String.Empty;
    [Parameter] public string parentcomponent { get; set; } = String.Empty;
    [Parameter] public string headerstyle { get; set; } = String.Empty;
    [Parameter] public bool admin { get; set; } = false;
    [Parameter] public ServicesData servicesData { get; set; } = new();


    private ServiceResponse serviceResponse = new();
    private string itemName = String.Empty;
    private string itemShortName = String.Empty;
    private string itemMinLength = "1";
    private string itemMaxLength = "10";
    private string componenttype = "standard";
    private bool isfreetext = false;
    private string currentuser = String.Empty;

    protected override async void OnInitialized()
    {
        currentuser = await IdentityHelper.GetCurrentUser(session);
    }

    async void Save()
    {
        bool valid = false;
        switch (type)
        {
            case "ResourceComponent":
                if (!String.IsNullOrEmpty(itemName))
                {
                    // Make sure the min/max length is valid
                    if (Convert.ToInt32(itemMaxLength) < Convert.ToInt32(itemMinLength))
                    {
                        toastService.ShowError("The Maximum Length must equal/greater than the Minimum length!");
                    }
                    else
                    {
                        // Make sure the name is unique
                        ArgumentNullException.ThrowIfNull(servicesData.ResourceComponents);
                        List<ResourceComponent> resourceComponents = servicesData.ResourceComponents;
                        if (resourceComponents.Where(x => GeneralHelper.NormalizeName(x.Name, true) == GeneralHelper.NormalizeName(itemName, true)).Count() > 0)
                        {
                            toastService.ShowError("You must enter a unique component name!");
                        }
                        else
                        {
                            valid = true;
                            if (componenttype == "freetext")
                            {
                                isfreetext = true;
                            }
                            ResourceComponent resourceComponent = new()
                                {
                                    Name = itemName,
                                    DisplayName = itemName,
                                    IsCustom = true,
                                    IsFreeText = isfreetext,
                                    MinLength = itemMinLength,
                                    MaxLength = itemMaxLength
                                };
                            serviceResponse = ResourceComponentService.PostItem(resourceComponent);
                        }
                    }
                }
                else
                {
                    toastService.ShowError("You must enter a component name!");
                }
                break;
            case "AdminUser":
                if (!String.IsNullOrEmpty(itemName))
                {
                    // Check if the item already exists
                    serviceResponse = AdminUserService.GetItems();
                    ArgumentNullException.ThrowIfNull(servicesData.AdminUsers);
                    List<AdminUser> adminUsers = servicesData.AdminUsers;
                    if (adminUsers.Any(x => x.Name == itemName))
                    {
                        toastService.ShowError("You must enter a unique Admin User name!");
                    }
                    else
                    {
                        valid = true;
                        AdminUser adminUser = new AdminUser()
                            {
                                Name = itemName
                            };
                        serviceResponse = AdminUserService.PostItem(adminUser);
                    }
                }

                break;
            default:
                if (itemName != null && itemShortName != null)
                {
                    if ((!string.IsNullOrEmpty(itemName)) && (!string.IsNullOrEmpty(itemShortName)))
                    {
                        if (ValidationHelper.ValidateShortName(type, itemShortName, this.parentcomponent))
                        {
                            itemShortName = itemShortName.ToLower();
                            string normailzedname = GeneralHelper.NormalizeName(itemName, true);
                            switch (type)
                            {
                                case "ResourceEnvironment":
                                    // Check if the item already exists
                                    ArgumentNullException.ThrowIfNull(servicesData.ResourceEnvironments);
                                    List<ResourceEnvironment> resourceEnvironments = servicesData.ResourceEnvironments;
                                    if (resourceEnvironments.Any(x => GeneralHelper.NormalizeName(x.Name, true) == normailzedname || x.ShortName == itemShortName))
                                    {
                                        toastService.ShowError("You must enter a unique Resource Environment name and short name!");
                                    }
                                    else
                                    {
                                        valid = true;
                                        ResourceEnvironment resourceEnvironment = new ResourceEnvironment()
                                            {
                                                Name = itemName,
                                                ShortName = itemShortName.ToLower()

                                            };
                                        serviceResponse = ResourceEnvironmentService.PostItem(resourceEnvironment);
                                    }
                                    break;
                                case "ResourceLocation":
                                    // Check if the item already exists
                                    serviceResponse = ResourceLocationService.GetItems();
                                    ArgumentNullException.ThrowIfNull(servicesData.ResourceLocations);
                                    List<ResourceLocation> resourceLocations = servicesData.ResourceLocations;
                                    if (resourceLocations.Any(x => GeneralHelper.NormalizeName(x.Name, true) == normailzedname || x.ShortName == itemShortName))
                                    {
                                        toastService.ShowError("You must enter a unique Resource Location name and short name!");
                                    }
                                    else
                                    {
                                        valid = true;
                                        ResourceLocation resourceLocation = new ResourceLocation()
                                            {
                                                Name = itemName,
                                                ShortName = itemShortName.ToLower()

                                            };
                                        serviceResponse = ResourceLocationService.PostItem(resourceLocation);
                                    }
                                    break;
                                case "ResourceOrg":
                                    // Check if the item already exists
                                    serviceResponse = ResourceOrgService.GetItems();
                                    ArgumentNullException.ThrowIfNull(servicesData.ResourceOrgs);
                                    List<ResourceOrg> resourceOrgs = servicesData.ResourceOrgs;
                                    if (resourceOrgs.Any(x => GeneralHelper.NormalizeName(x.Name, true) == normailzedname || x.ShortName == itemShortName))
                                    {
                                        toastService.ShowError("You must enter a unique Resource Org name and short name!");
                                    }
                                    else
                                    {
                                        valid = true;
                                        ResourceOrg resourceOrg = new ResourceOrg()
                                            {
                                                Name = itemName,
                                                ShortName = itemShortName.ToLower()

                                            };
                                        serviceResponse = ResourceOrgService.PostItem(resourceOrg);
                                    }
                                    break;
                                case "ResourceProjAppSvc":
                                    // Check if the item already exists
                                    serviceResponse = ResourceProjAppSvcService.GetItems();
                                    ArgumentNullException.ThrowIfNull(servicesData.ResourceProjAppSvcs);
                                    List<ResourceProjAppSvc> resourceProjAppSvcs = servicesData.ResourceProjAppSvcs;
                                    if (resourceProjAppSvcs.Any(x => GeneralHelper.NormalizeName(x.Name, true) == normailzedname || x.ShortName == itemShortName))
                                    {
                                        toastService.ShowError("You must enter a unique Resource Project/App/Service name and short name!");
                                    }
                                    else
                                    {
                                        valid = true;
                                        ResourceProjAppSvc resourceProjAppSvc = new ResourceProjAppSvc()
                                            {
                                                Name = itemName,
                                                ShortName = itemShortName.ToLower()

                                            };
                                        serviceResponse = ResourceProjAppSvcService.PostItem(resourceProjAppSvc);
                                    }
                                    break;
                                case "ResourceUnitDept":
                                    // Check if the item already exists
                                    serviceResponse = ResourceUnitDeptService.GetItems();
                                    ArgumentNullException.ThrowIfNull(servicesData.ResourceUnitDepts);
                                    List<ResourceUnitDept> resourceUnitDepts = servicesData.ResourceUnitDepts;
                                    if (resourceUnitDepts.Any(x => GeneralHelper.NormalizeName(x.Name, true) == normailzedname || x.ShortName == itemShortName))
                                    {
                                        toastService.ShowError("You must enter a unique Resource Unit/Dept name and short name!");
                                    }
                                    else
                                    {
                                        valid = true;
                                        ResourceUnitDept resourceUnitDept = new ResourceUnitDept()
                                            {
                                                Name = itemName,
                                                ShortName = itemShortName.ToLower()

                                            };
                                        serviceResponse =  ResourceUnitDeptService.PostItem(resourceUnitDept);
                                    }
                                    break;
                                case "ResourceFunction":
                                    // Check if the item already exists
                                    serviceResponse = ResourceFunctionService.GetItems();
                                    ArgumentNullException.ThrowIfNull(servicesData.ResourceFunctions);
                                    List<ResourceFunction> resourceFunctions = servicesData.ResourceFunctions;
                                    if (resourceFunctions.Any(x => GeneralHelper.NormalizeName(x.Name, true) == normailzedname || x.ShortName == itemShortName))
                                    {
                                        toastService.ShowError("You must enter a unique Resource Function name and short name!");
                                    }
                                    else
                                    {
                                        valid = true;
                                        ResourceFunction resourceFunction = new ResourceFunction()
                                            {
                                                Name = itemName,
                                                ShortName = itemShortName.ToLower()

                                            };
                                        serviceResponse = ResourceFunctionService.PostItem(resourceFunction);
                                    }
                                    break;
                                case "CustomComponent":
                                    // Check if the item already exists
                                    serviceResponse = CustomComponentService.GetItems();
                                    ArgumentNullException.ThrowIfNull(servicesData.CustomComponents);
                                    List<CustomComponent> customComponents = servicesData.CustomComponents;
                                    if (customComponents.Any(x => GeneralHelper.NormalizeName(x.Name, true) == normailzedname || x.ShortName == itemShortName))
                                    {
                                        toastService.ShowError("You must enter a unique Custom Component name and short name!");
                                    }
                                    else
                                    {
                                        valid = true;
                                        CustomComponent customComponent = new CustomComponent()
                                            {
                                                Name = itemName,
                                                ShortName = itemShortName.ToLower(),
                                                ParentComponent = GeneralHelper.NormalizeName(this.parentcomponent, true),
                                                MinLength = itemMinLength,
                                                MaxLength = itemMaxLength
                                            };
                                        serviceResponse = CustomComponentService.PostItem(customComponent);
                                    }
                                    break;
                            }
                        }
                        else
                        {
                            toastService.ShowError("You must enter a valid name and short name! Please check the Minimum and Maximum length requirements.");
                        }
                    }
                    else
                    {
                        toastService.ShowError("You must enter a name and short name!");
                    }
                }
                break;
        }

        if (valid)
        {
            if (serviceResponse.Success)
            {
                await ModalInstance.CloseAsync();
                toastService.ShowSuccess(type.Replace("Resource", "Resource ") + " added!");
                AdminLogService.PostItem(new AdminLogMessage() { Title = "SUCCESS", Message = "(" + type + ") " + itemName + " added!", Source = currentuser });
            }
            else
            {
                toastService.ShowError("There was an error adding the " + GeneralHelper.NormalizeName(type, false) + "!");
            }
        }
    }

    async Task Cancel() => await ModalInstance.CancelAsync();
}