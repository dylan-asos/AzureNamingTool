@page "/adminlog"
@inject ILogger<Configuration> Logger
@inject IJSRuntime JsRuntime
@inject IConfiguration Config
@inject StateContainer State
@inject ProtectedSessionStorage Session
@inject IToastService ToastService
@using AzureNamingTool.Models
@using AzureNamingTool.Services
@using AzureNamingTool.Helpers
@using System.Globalization
@implements IDisposable
@inject NavigationManager NavigationManager
@inject CacheHelper CacheHelper
@inject LogHelper LogHelper
@inject AdminLogService AdminLogService

<PageTitle>Azure Naming Tool - Admin Log</PageTitle>
<div class="card  @Theme!.ThemeStyle">
    <div class="card-body">
        <div style="float:left;">
            <h1>
                Admin Log
            </h1>
        </div>
        <div style="float:right;">
            <button class="btn btn-secondary" title="Instructions" @onclick="@(e => ModalHelper.ShowInformationModal(Modal!, Theme, "bg-navcolor", "Admin Log", string.Empty, "adminloginstructions", _admin))">
                <span class="oi oi-document" aria-hidden="true"></span> Documentation
            </button>
        </div>
        <div style="clear:both;"></div>
        <div class="mb-3">This page displays a log of Admin/Configuration changes.</div>


        @if (!_dataLoaded)
        {
            <div class="spinner-border blue" role="status">
                <span class="sr-only"></span>
            </div>
        }
        else
        {
            <div>
                @if (_lstAdminLogMessages.Count > 0)
                {
                    <div class="mb-3">
                        <button class="btn btn-primary" title="Export Admin Log" @onclick="@(e => OnExportLogClick())">
                            Export Admin Log
                        </button>
                        <button class="btn btn-danger" title="Purge Admin Log" @onclick="@(e => OnPurgeLogClick())">
                            Purge Admin Log
                        </button>
                    </div>
                    <div class="card mb-3">
                        <div class="card-header bg-default text-dark">
                            <a class="text-decoration-none text-dark" data-bs-toggle="collapse" style="display:block;font-weight:bold;" href="#filter" role="button" aria-expanded="false" aria-controls="filter">
                                <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Filter Data
                            </a>
                        </div>
                        <div class="collapse show card card-body @Theme.ThemeStyle" id="filter">
                            <div class="form-group row mb-3">
                                <div style="width:auto;">
                                    <input class="form-control" type="date" style="width: 150px;" @bind="StartDate" @bind:event="oninput"/>
                                </div>
                                <div style="width:auto;padding-top:7px;">
                                    to
                                </div>
                                <div style="width:auto;">
                                    <input class="form-control" type="date" style="width: 150px;" @bind="EndDate" @bind:event="oninput"/>
                                </div>
                            </div>
                            <div class="form-group row mb-3">
                                <div class="input-group flex-nowrap">
                                    <div class="input-group flex-nowrap">
                                        <span class="input-group-text" id="addon-wrapping">
                                            <span class="oi oi-magnifying-glass" id="addon-wrapping"></span>
                                        </span>
                                        <input class="form-control" type="search" placeholder="Filter by Source, Title, Message"
                                               @bind="FilterData"
                                               @bind:event="oninput">
                                    </div>
                                </div>
                            </div>
                            <div class="form-group row">
                                <div>
                                    <button class="btn btn-success" title="Reset" @onclick="@(e => OnResetClick())">
                                        Reset
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table @Theme.ThemeStyle">
                            <thead>
                            <tr>
                                <th scope="col">Created On</th>
                                <th scope="col">Source</th>
                                <th scope="col">Title</th>
                                <th scope="col">Message</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var message in _lstAdminLogMessages)
                            {
                                if (!IsVisible(message))
                                    continue;
                                <tr>
                                    <td class="align-top">
                                        @message.CreatedOn.ToString(CultureInfo.InvariantCulture)
                                    </td>
                                    <td class="align-top">
                                        @message.Source
                                    </td>
                                    <td class="align-top">
                                        @message.Title
                                    </td>
                                    <td class="align-top">
                                        @message.Message
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p style="font-style:italic">
                        There are no log items to display.
                    </p>
                }
            </div>
        }
    </div>
</div>

@code {

    [CascadingParameter]
    protected ThemeInfo? Theme { get; set; }

    [CascadingParameter]
    public IModalService? Modal { get; set; }

    private bool _admin;
    private bool _dataLoaded;
    List<AdminLogMessage> _lstAdminLogMessages = new();
    private string FilterData { get; set; } = string.Empty;
    private DateTime StartDate { get; set; } = DateTime.Today.AddDays(-30);
    private DateTime EndDate { get; set; } = DateTime.Today;
    private string _currentUser = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _currentUser = await IdentityHelper.GetCurrentUser(Session);
        if (firstRender)
        {
            var result = await Session.GetAsync<bool>("admin");
            _admin = result.Value;
            if (!_admin)
            {
                NavigationManager.NavigateTo("/");
            }
            var serviceResponse = await AdminLogService.GetItems();
            if (serviceResponse.Success)
            {
                if (serviceResponse.ResponseObject != null)
                {
                    _lstAdminLogMessages = (List<AdminLogMessage>) serviceResponse.ResponseObject!;
                }
            }

            _dataLoaded = true;
            StateHasChanged();
        }
    }

    private void OnInstructionsClick()
    {
        NavigationManager.NavigateTo("/instructions");
    }


    public void Dispose()
    {
        StateHasChanged();
    }

    private async Task OnPurgeLogClick()
    {
        var confirm = await ModalHelper
            .ShowConfirmationModal(Modal!, "ATTENTION", "<div class=\"my-4\">This will purge the Admin Log and cannot be undone!</div><div class=\"my-4\">Are you sure?</div>", "bg-danger", Theme!);

        if (confirm)
        {
            LogHelper.PurgeAdminLog();
            ToastService.ShowSuccess("Admin Log purged!");
            await AdminLogService.PostItem(new AdminLogMessage {Source = _currentUser, Title = "INFORMATION", Message = "Admin Log purged."});
            
            CacheHelper.InvalidateCacheObject("AdminLogMessage");
            var serviceResponse = await AdminLogService.GetItems();
            if (serviceResponse.Success)
            {
                if (serviceResponse.ResponseObject != null)
                {
                    _lstAdminLogMessages = (List<AdminLogMessage>) serviceResponse.ResponseObject!;
                }
            }
            _dataLoaded = true;
            StateHasChanged();
        }
    }

    private async Task OnExportLogClick()
    {
        await JsRuntime.InvokeVoidAsync("htmlToCSV", "adminlog.csv");
    }

    public bool IsVisible(AdminLogMessage message)
    {
        var visible = !(message.CreatedOn < StartDate);

        if (message.CreatedOn > EndDate + new TimeSpan(23, 59, 59))
            visible = false;

        if (!string.IsNullOrEmpty(FilterData))
        {
            if (!message.Source.Contains(FilterData, StringComparison.OrdinalIgnoreCase) && !message.Title.Contains(FilterData, StringComparison.OrdinalIgnoreCase) && !message.Message.Contains(FilterData, StringComparison.OrdinalIgnoreCase))
                visible = false;
        }
        return visible;
    }

    private void OnResetClick()
    {
        StartDate = DateTime.Today.AddDays(-30);
        EndDate = DateTime.Today;
        FilterData = "";
    }
}